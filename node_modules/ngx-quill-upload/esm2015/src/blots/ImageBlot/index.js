import Quill from 'quill';
import { Constants } from '../../utils';
const blotPath = 'formats/image';
const BlockEmbed = Quill.import(blotPath);
const SUPPORTED_ATTRIBUTES = [
    'alt',
    'height',
    'width',
    'style'
];
class ImageBlot extends BlockEmbed {
    static create(value) {
        let id;
        let src;
        if (typeof value === 'object' && !value.url) {
            return super.create();
        }
        const arr = value.url
            ? value.url.split(Constants.ID_SPLIT_FLAG)
            : value.split(Constants.ID_SPLIT_FLAG);
        if (arr.length > 1) {
            id = arr[0];
            src = arr[1];
        }
        else {
            src = value;
        }
        const node = super.create(src);
        if (typeof src === 'string') {
            node.setAttribute('src', src);
        }
        if (typeof src === 'object') {
            node.setAttribute('src', src.url);
        }
        if (id) {
            node.setAttribute('id', id);
        }
        return node;
    }
    static value(node) {
        return {
            alt: node.getAttribute('alt'),
            url: node.getAttribute('src'),
        };
    }
    static formats(domNode) {
        return SUPPORTED_ATTRIBUTES.reduce(function (formats, attribute) {
            if (domNode.hasAttribute(attribute)) {
                formats[attribute] = domNode.getAttribute(attribute);
            }
            return formats;
        }, {});
    }
    format(name, value) {
        if (SUPPORTED_ATTRIBUTES.indexOf(name) > -1) {
            if (value) {
                this.domNode.setAttribute(name, value);
            }
            else {
                this.domNode.removeAttribute(name);
            }
        }
        else {
            super.format(name, value);
        }
    }
}
ImageBlot.tagName = 'img';
ImageBlot.blotName = Constants.blots.image;
ImageBlot.className = 'quill-upload-image';
export default ImageBlot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmxvdHMvSW1hZ2VCbG90L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhDLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQztBQUNqQyxNQUFNLFVBQVUsR0FBYyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBU3JELE1BQU0sb0JBQW9CLEdBQUc7SUFDM0IsS0FBSztJQUNMLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztDQUNSLENBQUM7QUFFRixNQUFNLFNBQVUsU0FBUSxVQUFVO0lBS2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSztRQUNqQixJQUFJLEVBQVUsQ0FBQztRQUNmLElBQUksR0FBVyxDQUFDO1FBRWhCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUMzQyxPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN2QjtRQUVELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHO1lBQ25CLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO1lBQzFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN6QyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2xCLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWixHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2Q7YUFBTTtZQUNMLEdBQUcsR0FBRyxLQUFLLENBQUM7U0FDYjtRQUVELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDL0I7UUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRyxHQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUM7UUFFRCxJQUFJLEVBQUUsRUFBRTtZQUNOLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQzdCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJO1FBQ2YsT0FBTztZQUNMLEdBQUcsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztZQUM3QixHQUFHLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7U0FDOUIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU87UUFDcEIsT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsVUFBVSxPQUFPLEVBQUUsU0FBUztZQUM3RCxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ25DLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3REO1lBQ0QsT0FBTyxPQUFPLENBQUM7UUFDakIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSztRQUNoQixJQUFJLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUMzQyxJQUFJLEtBQUssRUFBRTtnQkFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDeEM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDcEM7U0FDRjthQUFNO1lBQ0wsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxTQUFTLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUMxQixTQUFTLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQzNDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUM7QUFFM0MsZUFBZSxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUXVpbGwgZnJvbSAncXVpbGwnO1xyXG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcblxyXG5jb25zdCBibG90UGF0aCA9ICdmb3JtYXRzL2ltYWdlJztcclxuY29uc3QgQmxvY2tFbWJlZDogRW1iZWRCbG90ID0gUXVpbGwuaW1wb3J0KGJsb3RQYXRoKTtcclxuXHJcbmludGVyZmFjZSBFbWJlZEJsb3Qge1xyXG4gIG5ldyguLi5hcmdzOiBhbnlbXSk6IEVtYmVkQmxvdDtcclxuICBkb21Ob2RlOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gIGZvcm1hdChuYW1lLCB2YWx1ZSk7XHJcbiAgY3JlYXRlKHZhbHVlPyk7XHJcbn1cclxuXHJcbmNvbnN0IFNVUFBPUlRFRF9BVFRSSUJVVEVTID0gW1xyXG4gICdhbHQnLFxyXG4gICdoZWlnaHQnLFxyXG4gICd3aWR0aCcsXHJcbiAgJ3N0eWxlJ1xyXG5dO1xyXG5cclxuY2xhc3MgSW1hZ2VCbG90IGV4dGVuZHMgQmxvY2tFbWJlZCB7XHJcbiAgc3RhdGljIHRhZ05hbWU6IHN0cmluZztcclxuICBzdGF0aWMgYmxvdE5hbWU6IHN0cmluZztcclxuICBzdGF0aWMgY2xhc3NOYW1lOiBzdHJpbmc7XHJcblxyXG4gIHN0YXRpYyBjcmVhdGUodmFsdWUpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBsZXQgaWQ6IHN0cmluZztcclxuICAgIGxldCBzcmM6IHN0cmluZztcclxuXHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhdmFsdWUudXJsKSB7XHJcbiAgICAgIHJldHVybiBzdXBlci5jcmVhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhcnIgPSB2YWx1ZS51cmxcclxuICAgICAgPyB2YWx1ZS51cmwuc3BsaXQoQ29uc3RhbnRzLklEX1NQTElUX0ZMQUcpXHJcbiAgICAgIDogdmFsdWUuc3BsaXQoQ29uc3RhbnRzLklEX1NQTElUX0ZMQUcpO1xyXG4gICAgaWYgKGFyci5sZW5ndGggPiAxKSB7XHJcbiAgICAgIGlkID0gYXJyWzBdO1xyXG4gICAgICBzcmMgPSBhcnJbMV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzcmMgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBub2RlID0gc3VwZXIuY3JlYXRlKHNyYyk7XHJcbiAgICBpZiAodHlwZW9mIHNyYyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzcmMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdzcmMnLCAoc3JjIGFzIGFueSkudXJsKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaWQpIHtcclxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBub2RlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHZhbHVlKG5vZGUpOiBvYmplY3Qge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYWx0OiBub2RlLmdldEF0dHJpYnV0ZSgnYWx0JyksXHJcbiAgICAgIHVybDogbm9kZS5nZXRBdHRyaWJ1dGUoJ3NyYycpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmb3JtYXRzKGRvbU5vZGUpIHtcclxuICAgIHJldHVybiBTVVBQT1JURURfQVRUUklCVVRFUy5yZWR1Y2UoZnVuY3Rpb24gKGZvcm1hdHMsIGF0dHJpYnV0ZSkge1xyXG4gICAgICBpZiAoZG9tTm9kZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlKSkge1xyXG4gICAgICAgIGZvcm1hdHNbYXR0cmlidXRlXSA9IGRvbU5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZvcm1hdHM7XHJcbiAgICB9LCB7fSk7XHJcbiAgfVxyXG5cclxuICBmb3JtYXQobmFtZSwgdmFsdWUpIHtcclxuICAgIGlmIChTVVBQT1JURURfQVRUUklCVVRFUy5pbmRleE9mKG5hbWUpID4gLTEpIHtcclxuICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5kb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3VwZXIuZm9ybWF0KG5hbWUsIHZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbkltYWdlQmxvdC50YWdOYW1lID0gJ2ltZyc7XHJcbkltYWdlQmxvdC5ibG90TmFtZSA9IENvbnN0YW50cy5ibG90cy5pbWFnZTtcclxuSW1hZ2VCbG90LmNsYXNzTmFtZSA9ICdxdWlsbC11cGxvYWQtaW1hZ2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgSW1hZ2VCbG90O1xyXG4iXX0=