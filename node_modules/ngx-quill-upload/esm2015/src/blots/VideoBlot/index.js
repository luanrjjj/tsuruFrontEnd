import Quill from 'quill';
import { Constants } from '../../utils';
const blotPath = 'blots/block/embed';
const BlockEmbed = Quill.import(blotPath);
class VideoBlot extends BlockEmbed {
    static create(value) {
        let id;
        let src;
        if (typeof value === 'object' && !value.url) {
            return super.create();
        }
        const arr = value.url
            ? value.url.split(Constants.ID_SPLIT_FLAG)
            : value.split(Constants.ID_SPLIT_FLAG);
        if (arr.length > 1) {
            id = arr[0];
            src = arr[1];
        }
        else {
            src = value;
        }
        const node = super.create(src);
        if (typeof src === 'string') {
            node.setAttribute('src', src);
        }
        if (typeof src === 'object') {
            node.setAttribute('src', src.url);
        }
        if (id) {
            node.setAttribute('id', id);
        }
        node.setAttribute('controls', true);
        node.setAttribute('controlsList', 'nodownload');
        node.setAttribute('width', '100%');
        return node;
    }
    static formats(node) {
        const format = {};
        if (node.hasAttribute('height')) {
            format.height = node.getAttribute('height');
        }
        if (node.hasAttribute('width')) {
            format.width = node.getAttribute('width');
        }
        return format;
    }
    static value(node) {
        return node.getAttribute('src');
    }
    format(name, value) {
        if (name === 'height' || name === 'width') {
            if (value) {
                this.domNode.setAttribute(name, value);
            }
            else {
                this.domNode.removeAttribute(name, value);
            }
        }
        else {
            super.format(name, value);
        }
    }
}
VideoBlot.tagName = 'video';
VideoBlot.blotName = Constants.blots.video;
VideoBlot.className = 'quill-upload-video';
export default VideoBlot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmxvdHMvVmlkZW9CbG90L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhDLE1BQU0sUUFBUSxHQUFHLG1CQUFtQixDQUFDO0FBQ3JDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFMUMsTUFBTSxTQUFVLFNBQVEsVUFBVTtJQU1oQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUs7UUFDakIsSUFBSSxFQUFVLENBQUM7UUFDZixJQUFJLEdBQVcsQ0FBQztRQUVoQixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDM0MsT0FBTyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDdkI7UUFDRCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRztZQUNuQixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztZQUMxQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekMsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNsQixFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1osR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNkO2FBQU07WUFDTCxHQUFHLEdBQUcsS0FBSyxDQUFDO1NBQ2I7UUFFRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQy9CO1FBRUQsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUcsR0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzVDO1FBRUQsSUFBSSxFQUFFLEVBQUU7WUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUM3QjtRQUVELElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRW5DLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSTtRQUNqQixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFDdkIsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM3QztRQUNELElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUM5QixNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJO1FBQ2YsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUs7UUFDaEIsSUFBSSxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7WUFDekMsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3hDO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQzthQUMzQztTQUNGO2FBQU07WUFDTCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7Q0FDRjtBQUVELFNBQVMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQzVCLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDM0MsU0FBUyxDQUFDLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQztBQUUzQyxlQUFlLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBRdWlsbCBmcm9tICdxdWlsbCc7XHJcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJy4uLy4uL3V0aWxzJztcclxuXHJcbmNvbnN0IGJsb3RQYXRoID0gJ2Jsb3RzL2Jsb2NrL2VtYmVkJztcclxuY29uc3QgQmxvY2tFbWJlZCA9IFF1aWxsLmltcG9ydChibG90UGF0aCk7XHJcblxyXG5jbGFzcyBWaWRlb0Jsb3QgZXh0ZW5kcyBCbG9ja0VtYmVkIHtcclxuICBzdGF0aWMgY2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgc3RhdGljIGJsb3ROYW1lOiBzdHJpbmc7XHJcbiAgc3RhdGljIHRhZ05hbWU6IHN0cmluZztcclxuICBkb21Ob2RlOiBhbnk7XHJcblxyXG4gIHN0YXRpYyBjcmVhdGUodmFsdWUpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBsZXQgaWQ6IHN0cmluZztcclxuICAgIGxldCBzcmM6IHN0cmluZztcclxuXHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhdmFsdWUudXJsKSB7XHJcbiAgICAgIHJldHVybiBzdXBlci5jcmVhdGUoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGFyciA9IHZhbHVlLnVybFxyXG4gICAgICA/IHZhbHVlLnVybC5zcGxpdChDb25zdGFudHMuSURfU1BMSVRfRkxBRylcclxuICAgICAgOiB2YWx1ZS5zcGxpdChDb25zdGFudHMuSURfU1BMSVRfRkxBRyk7XHJcbiAgICBpZiAoYXJyLmxlbmd0aCA+IDEpIHtcclxuICAgICAgaWQgPSBhcnJbMF07XHJcbiAgICAgIHNyYyA9IGFyclsxXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNyYyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG5vZGUgPSBzdXBlci5jcmVhdGUoc3JjKTtcclxuICAgIGlmICh0eXBlb2Ygc3JjID09PSAnc3RyaW5nJykge1xyXG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnc3JjJywgc3JjKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNyYyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIChzcmMgYXMgYW55KS51cmwpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpZCkge1xyXG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2NvbnRyb2xzJywgdHJ1ZSk7XHJcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnY29udHJvbHNMaXN0JywgJ25vZG93bmxvYWQnKTtcclxuICAgIG5vZGUuc2V0QXR0cmlidXRlKCd3aWR0aCcsICcxMDAlJyk7XHJcblxyXG4gICAgcmV0dXJuIG5vZGU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZm9ybWF0cyhub2RlKSB7XHJcbiAgICBjb25zdCBmb3JtYXQ6IGFueSA9IHt9O1xyXG4gICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKCdoZWlnaHQnKSkge1xyXG4gICAgICBmb3JtYXQuaGVpZ2h0ID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKCd3aWR0aCcpKSB7XHJcbiAgICAgIGZvcm1hdC53aWR0aCA9IG5vZGUuZ2V0QXR0cmlidXRlKCd3aWR0aCcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZvcm1hdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB2YWx1ZShub2RlKSB7XHJcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xyXG4gIH1cclxuXHJcbiAgZm9ybWF0KG5hbWUsIHZhbHVlKSB7XHJcbiAgICBpZiAobmFtZSA9PT0gJ2hlaWdodCcgfHwgbmFtZSA9PT0gJ3dpZHRoJykge1xyXG4gICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmRvbU5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3VwZXIuZm9ybWF0KG5hbWUsIHZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblZpZGVvQmxvdC50YWdOYW1lID0gJ3ZpZGVvJztcclxuVmlkZW9CbG90LmJsb3ROYW1lID0gQ29uc3RhbnRzLmJsb3RzLnZpZGVvO1xyXG5WaWRlb0Jsb3QuY2xhc3NOYW1lID0gJ3F1aWxsLXVwbG9hZC12aWRlbyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBWaWRlb0Jsb3Q7XHJcbiJdfQ==